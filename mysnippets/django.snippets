# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
# Code Skeletons

snippet iform "Imports for forms" b
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from django import forms
from django.utils.translation import ugettext_lazy as _
${0}
endsnippet

snippet imodels "Imports for models" b
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from django.db import models
from django.utils.translation import ugettext_lazy as _
endsnippet

snippet iadmin "Import for admin" b
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
endsnippet

snippet iurl "Import for urls" b
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from django.conf.urls import patterns, url

urlpatterns = patterns('',
    url(r'^${1:re}/$', ${2:view}, name="${3}"),${0}
    )
endsnippet


snippet form "base form" b
class ${1:FormName}(forms.Form):
    """${2:docstring}"""
    ${3}
endsnippet

snippet mform "Model form" b 
class ${1}Form(ModelForm):
    """Modelform for $1"""

    class Meta:
        model = $1
    $0
endsnippet

snippet cleanf "cleand field validation" b
def clean_${1:field}(self):
    # should raise forms.ValidationError
    data = self.cleaned_data['$1']
    ${0}
    return data
endsnippet

snippet model "base model" b
class ${1:ModelName}(models.Model):
    """${2:docstring}"""

    ${3}
    
    class Meta:
        verbose_name = u"${4}"
        verbose_name_plural = u"${5}"
    
    def __unicode__(self):
        return self.${6}
    
    def save(self, force_insert=False, force_update=False):
        super($1, self).save(**kwargs)
    
    @models.permalink
    def get_absolute_url(self):
        return ('${7:view_or_url_name}' ${8})
endsnippet


snippet modeladmin "base model admin" b
class ${1:ModelName}Admin(admin.ModelAdmin):
    ${2}

admin.site.register($1, $1Admin)
endsnippet

snippet r2r "base render to response" b
return render_to_response('${1:template.html}', {
        ${2}
    }${3:, context_instance=RequestContext(request)}
)
endsnippet


snippet tabularinline "tabular inline class" b
class ${1:ModelName}Inline(admin.TabularInline):
    model = $1
    extra = ${2:3}
endsnippet


snippet stackedinline "stacked inline class" b
class ${1:ModelName}Inline(admin.StackedInline):
    model = $1
    extra = ${2:3}
endsnippet


snippet fview "form view" b
class ${1:ClassName}(FormView):
    """${0:docstring for $1}"""

    form_class = ${2:}
    template_name = '${3:}'
    success_url = reverse_lazy('${4:url_for_success}')

    def get_context_data(self, **kwargs):
        context = super($1, self).get_context_data(**kwargs)
        return context

    def form_valid(self, form):
        """${6:docstring for $1}"""
        #!TODO Complete
        return super($1, self).form_valid(form)

    def form_invalid(self, form):
        """${7:docstring for $1}"""
        #!TODO Complete
        return super($1, self).form_valid(form)
endsnippet


snippet tview "template view" b
class ${1:ClassName}(TemplateView):
    template_name = '${2:}'

    def get_context_data(self, **kwargs):
        context = super($1, self).get_context_data(**kwargs)
        ${3:}
        return context
endsnippet


snippet rview "reverse view" b
class ${1:ClassName}(RedirectView):
    permanent = ${2:true}

def get_redirect_url(self, **kwargs):
    return reverse(${3})
endsnippet


snippet lview "list view" b
class ${1:ClassName}(ListView):
    model = ${2:Model}

    def get_queryset(self):
        queryset = ${3:$2.objects.all()}
        ${4}
    return queryset
endsnippet

snippet ts "Translatable string" i
_(u"${0:${VISUAL:string}}")$1
endsnippet
